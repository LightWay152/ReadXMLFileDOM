package gui;

import java.io.File;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * @author DaoNguyen
 */
public class customerDOM extends javax.swing.JFrame {
   
    public File xmlFile = null;
    public Document xmlFileDOM = null; 
    
    /**
     * Creates new form employeeGUI
     */
    public customerDOM() {
        initComponents();
        loadCustomerAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtTotalVND = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTotalUSD = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "FullName", "ProductName", "ProductNumber", "ProductPrice"
            }
        ));
        tblCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCustomers);

        jLabel3.setText("Total (VND):");

        txtTotalVND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalVNDActionPerformed(evt);
            }
        });

        jLabel4.setText("Total (USD):");

        txtTotalUSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalUSDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTotalUSD, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                            .addComponent(txtTotalVND))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTotalVND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTotalUSD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTotalVNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalVNDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalVNDActionPerformed

    private void txtTotalUSDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalUSDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalUSDActionPerformed

    private void tblCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomersMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblCustomersMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new customerDOM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTextField txtTotalUSD;
    private javax.swing.JTextField txtTotalVND;
    // End of variables declaration//GEN-END:variables

    private void loadCustomerAll() {
        xmlFile = new File("C:\\Users\\DaoNguyen\\Desktop\\XML_Slide\\lab\\staff.xml");
        if (xmlFile.exists() && xmlFile.length() != 0) {
            xmlFileDOM = parseFile(xmlFile);
            insertTableRows(xmlFileDOM);   
        }
    }
    
    public Document parseFile(File file) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();     
            xmlFileDOM = (Document) builder.parse(file);
        } catch (Exception e){ 
            e.printStackTrace(); 
        }  
        return xmlFileDOM;
    }

    public void insertTableRows(Document doc) {   
        String[] header = {"Id","FullName","ProductName","ProductNumber","ProductPrice"};
        DefaultTableModel dtmCustomers = new DefaultTableModel(header,0);
        Element root = doc.getDocumentElement();
        NodeList list = root.getElementsByTagName("Customer");
        try{
            int usd = 0;
            int vnd = 0;
            for (int i = 0; i < list.getLength(); ++i) 
            {
                Element e = (Element) list.item(i);
                if (e.getNodeType() == Element.ELEMENT_NODE) {
                    String firstName = String.valueOf(getArticleInfo("FirstName",e));
                    String lastName = String.valueOf(getArticleInfo("LastName",e));
                    String fullName = firstName+" "+lastName;
                    System.out.println("fullName:"+fullName);             

                    XPathFactory xPathfactory = XPathFactory.newInstance();
                    XPath xpath = xPathfactory.newXPath();
                    XPathExpression idExpression, currencyExpression;

                    idExpression = xpath.compile("//root/Customer[@id]");
                    NodeList idNodeList = (NodeList) idExpression.evaluate(xmlFileDOM, XPathConstants.NODESET);
                    String idValue = "";
                    
                    Node idCurrentItem = idNodeList.item(i);
                    idValue = idCurrentItem.getAttributes().getNamedItem("id").getNodeValue();
                    System.out.println(idValue);
                    
                    currencyExpression = xpath.compile("//root/Customer/ProductPrice[@currency]");
                    NodeList currencyNodeList = (NodeList) currencyExpression.evaluate(xmlFileDOM, XPathConstants.NODESET);
                    String currencyValue = "";
                    
                    Node priceCurrentItem = currencyNodeList.item(i);
                    currencyValue = priceCurrentItem.getAttributes().getNamedItem("currency").getNodeValue();
                    System.out.println(currencyValue);

                    String priceRowValue = String.valueOf(getArticleInfo("ProductPrice",e))+" ("+currencyValue+")";
                    
                    
                    if(priceRowValue.endsWith(" (USD)")){
                        priceRowValue.trim();
                        priceRowValue.replace(" (USD)","");
                        int totalUSDPrice = 0;
                        totalUSDPrice += Integer.parseInt(priceRowValue.replace(" (USD)",""));
                        System.out.println("Price: "+totalUSDPrice);
                        usd += totalUSDPrice;
                    }  
                    else if(priceRowValue.endsWith(" (VND)")){
                        priceRowValue.trim();
                        priceRowValue.replace(" (VND)","");
                        int totalVNDPrice = 0;
                        totalVNDPrice += Integer.parseInt(priceRowValue.replace(" (VND)",""));
                        System.out.println("Price: "+totalVNDPrice);
                        vnd += totalVNDPrice;
                    }
                    
                    Object[] row = {
                        idValue,
                        fullName,
                        getArticleInfo("ProductName",e),
                        getArticleInfo("ProductNumber",e),
                        priceRowValue
                    };
                    dtmCustomers.addRow(row);                     
                    
                }
            }
            txtTotalUSD.setText(String.valueOf(usd));
            txtTotalVND.setText(String.valueOf(vnd));
        } catch (Exception ex) {
            ex.printStackTrace();
        } 
        
        tblCustomers.setModel(dtmCustomers);
    }
    
    public Object getArticleInfo(String tagName, Element elem) {    
        NodeList list = elem.getElementsByTagName(tagName);
        for (int i = 0; i < list.getLength(); ++i) {
            Node node = (Node) list.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Node child = (Node) node.getFirstChild();
                return child.getTextContent().trim();
            }
            return null;
        }    
        return null;
    }

}
